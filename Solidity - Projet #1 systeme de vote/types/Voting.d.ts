/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VotingContract extends Truffle.Contract<VotingInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VotingInstance>;
}

export interface DrawWinners {
  name: "DrawWinners";
  args: {
    proposalsIds: { description: string; voteCount: BN }[];
    0: { description: string; voteCount: BN }[];
  };
}

export interface NoWinner {
  name: "NoWinner";
  args: {};
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProposalRegistered {
  name: "ProposalRegistered";
  args: {
    proposalId: BN;
    0: BN;
  };
}

export interface UniqueWinner {
  name: "UniqueWinner";
  args: {
    proposalId: { description: string; voteCount: BN };
    0: { description: string; voteCount: BN };
  };
}

export interface Voted {
  name: "Voted";
  args: {
    voter: string;
    proposalId: BN;
    0: string;
    1: BN;
  };
}

export interface VoterRegistered {
  name: "VoterRegistered";
  args: {
    voterAddress: string;
    0: string;
  };
}

export interface WorkflowStatusChange {
  name: "WorkflowStatusChange";
  args: {
    previousStatus: BN;
    newStatus: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | DrawWinners
  | NoWinner
  | OwnershipTransferred
  | ProposalRegistered
  | UniqueWinner
  | Voted
  | VoterRegistered
  | WorkflowStatusChange;

export interface VotingInstance extends Truffle.ContractInstance {
  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Registers a new voter.   Only accessing to contract owner.
   * @param voterAddr address The voter address to register.  Emits a {WorkflowStatusChange} event.
   */
  registerVoter: {
    (voterAddr: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      voterAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      voterAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      voterAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Start the proposals registration process.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
   */
  startProposalsRegistrations: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * End the proposals registration process.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
   */
  endProposalsRegistrations: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Start the voting session.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
   */
  startVotingSession: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * End the voting session.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
   */
  endVotingSession: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Allows a voter to register a proposal  Only accessible to registered voters.
   * @param description string calldata The proposal description.  Emits a {ProposalRegistered} event.
   */
  makeProposal: {
    (description: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allows voters to see the list of _proposals.  Only accessible to registered voters. Can only be consulted if the proposal process is already finished.
   */
  getProposalsList(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ description: string; voteCount: BN }[]>;

  /**
   * Allows voters to get a proposal details.  Only accessible to registered voters.  Only available if the proposal process ended.
   * @param _proposalId uint Id of the proposal to look up.
   */
  getProposalDetails(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ description: string; voteCount: BN }>;

  /**
   * Allows a voter to vote for a proposal.  Only accessible to registered voters. Voters can only vote once.
   * @param _proposalId uint The proposal id.  Emits a {Voted} event.
   */
  voteForProposal: {
    (
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Counts the votes and determine the most voted winning proposal.   Only accessible to contract owner.  Emits a {WorkflowStatusChange} event. Emits a {DrawResult} or {UniqueWinner} event.
   */
  countVotes: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Allows anyone to get the winning proposal(s) details.
   */
  getWinner(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ description: string; voteCount: BN }[]>;

  /**
   * Function to reset the voting process all together.
   */
  resetVotingProcess: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Registers a new voter.   Only accessing to contract owner.
     * @param voterAddr address The voter address to register.  Emits a {WorkflowStatusChange} event.
     */
    registerVoter: {
      (voterAddr: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        voterAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        voterAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        voterAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Start the proposals registration process.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
     */
    startProposalsRegistrations: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * End the proposals registration process.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
     */
    endProposalsRegistrations: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Start the voting session.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
     */
    startVotingSession: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * End the voting session.  Only accessible to contract owner.  Emits a {WorkflowStatusChange} event.
     */
    endVotingSession: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Allows a voter to register a proposal  Only accessible to registered voters.
     * @param description string calldata The proposal description.  Emits a {ProposalRegistered} event.
     */
    makeProposal: {
      (description: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allows voters to see the list of _proposals.  Only accessible to registered voters. Can only be consulted if the proposal process is already finished.
     */
    getProposalsList(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ description: string; voteCount: BN }[]>;

    /**
     * Allows voters to get a proposal details.  Only accessible to registered voters.  Only available if the proposal process ended.
     * @param _proposalId uint Id of the proposal to look up.
     */
    getProposalDetails(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ description: string; voteCount: BN }>;

    /**
     * Allows a voter to vote for a proposal.  Only accessible to registered voters. Voters can only vote once.
     * @param _proposalId uint The proposal id.  Emits a {Voted} event.
     */
    voteForProposal: {
      (
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Counts the votes and determine the most voted winning proposal.   Only accessible to contract owner.  Emits a {WorkflowStatusChange} event. Emits a {DrawResult} or {UniqueWinner} event.
     */
    countVotes: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Allows anyone to get the winning proposal(s) details.
     */
    getWinner(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ description: string; voteCount: BN }[]>;

    /**
     * Function to reset the voting process all together.
     */
    resetVotingProcess: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
